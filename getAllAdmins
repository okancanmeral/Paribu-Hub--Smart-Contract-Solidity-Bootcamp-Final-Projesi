function getAllAdmins() public view returns(Account[] memory) {
    Account[] memory _admins = new Account[](3);
    for (uint i = 0; i < 3; i++) {
        _admins[i] = admins[i];
    }

    return _admins;
}

Bu işlev, bir kullanıcının bakiyesini düşürdükten sonra alıcının bakiyesini artırırken, reentrant saldırılarına karşı savunmasızdır. 
Reentrant saldırıları, alıcı olarak belirtilen başka bir akıllı sözleşme tarafından başlatılabilir ve bu, işlemin sıkışmasına neden olabilir.
Reentrant saldırılardan korunmak için özel bir güvenlik önlemi eklemek önemlidir. Solidity'nin "nonReentrant" modifikatörünü kullanmak bu konuda iyi bir çözüm olabilir.

bool private locked;

modifier noReentrant() {
    require(!locked, "Reentrant call");
    locked = true;
    _;
    locked = false;
}

function transfer(address to, uint256 value) external noReentrant returns (bool) {
    Account[] memory _admins = new Account[](3);
    for (uint i = 0; i < 3; i++) {
        _admins[i] = admins[i];
    }

    return _admins;
}

Olarak tekrardan düzenleyebiliriz.
